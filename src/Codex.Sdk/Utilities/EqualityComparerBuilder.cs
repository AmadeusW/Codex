using System;
using System.Collections.Generic;
using System.Linq;

namespace Codex.Utilities
{
    /// <summary>
    /// Chains comparers to perform comparison and hash code compuations.
    /// </summary>
    public class EqualityComparerBuilder<T> : EqualityComparer<T>
    {
        private LinkedList<IEqualityComparer<T>> comparers = new LinkedList<IEqualityComparer<T>>();

        /// <summary>
        /// Modifies the comparer so that it next compares items using specified comparer on the key generated by the function.
        /// </summary>
        /// <typeparam name="TCompare">the type of key to compare</typeparam>
        /// <param name="keySelector">function for selecting the comparison key</param>
        /// <param name="comparer">the comparer for the key</param>
        /// <returns>This comparer updated with this comparison at the end of the comparision chain</returns>
        public EqualityComparerBuilder<T> CompareByAfter<TCompare>(Func<T, TCompare> keySelector, IEqualityComparer<TCompare> comparer = null)
        {
            comparer = comparer ?? EqualityComparer<TCompare>.Default;
            comparers.AddLast(new SelectorEqualityComparer<TCompare>(keySelector, comparer));
            return this;
        }

        /// <summary>
        /// Modifies the comparer so that it begins by comparing items using specified comparer on the key generated by the function.
        /// </summary>
        /// <typeparam name="TCompare">the type of key to compare</typeparam>
        /// <param name="keySelector">function for selecting the comparison key</param>
        /// <param name="comparer">the comparer for the key</param>
        /// <returns>This comparer updated with this comparison at the beginning of the comparision chain</returns>
        public EqualityComparerBuilder<T> CompareByBefore<TCompare>(Func<T, TCompare> keySelector, IEqualityComparer<TCompare> comparer = null)
        {
            comparer = comparer ?? EqualityComparer<TCompare>.Default;
            comparers.AddFirst(new SelectorEqualityComparer<TCompare>(keySelector, comparer));
            return this;
        }

        private class SelectorEqualityComparer<TCompare> : EqualityComparer<T>
        {
            Func<T, TCompare> selector;
            IEqualityComparer<TCompare> comparer;

            public SelectorEqualityComparer(Func<T, TCompare> selector, IEqualityComparer<TCompare> comparer)
            {
                this.selector = selector;
                this.comparer = comparer;
            }

            public override bool Equals(T x, T y)
            {
                return comparer.Equals(selector(x), selector(y));
            }

            public override int GetHashCode(T obj)
            {
                return comparer.GetHashCode(selector(obj));
            }
        }

        /// <summary>
        /// Compares the items using the list of stored comparers. The objects are considered equal if all comparers
        /// return true when comparing the objects. Otherwise, the objects are not equal.
        /// </summary>
        /// <param name="x">the first object to compare</param>
        /// <param name="y">the second object to compare</param>
        /// <returns>True, if the objects are equal according to all comparers. Otherwise, false.</returns>
        public override bool Equals(T x, T y)
        {
            if (object.ReferenceEquals(x, y))
            {
                return true;
            }
            if (x == null || y == null)
            {
                return false;
            }

            return comparers.All(c => c.Equals(x, y));
        }

        /// <summary>
        /// Returns an aggregate hash code of all comparers for the object.
        /// </summary>
        /// <param name="obj">The object for which to generate a hash code.</param>
        /// <returns>The aggregate hash code for the object.</returns>
        public override int GetHashCode(T obj)
        {
            if (obj == null)
            {
                return 0;
            }

            int hash = 17;
            unchecked
            {
                foreach (var comparer in comparers)
                {
                    hash = hash * 23 + comparer.GetHashCode(obj);
                }
            }
            return hash;
        }
    }
}
