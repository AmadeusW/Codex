using System;
using System.Collections.Generic;

namespace Codex.Utilities
{
    /// <summary>
    /// Chains compares to perform comparison operations.
    /// </summary>
    public class ComparerBuilder<T> : Comparer<T>
    {
        private LinkedList<IComparer<T>> comparers = new LinkedList<IComparer<T>>();

        /// <summary>
        /// Modifies the comparer so that it next compares items using specified comparer on the key generated by the function.
        /// </summary>
        /// <typeparam name="TCompare">the type of key to compare</typeparam>
        /// <param name="keySelector">function for selecting the comparison key</param>
        /// <param name="comparer">the comparer for the key</param>
        /// <returns>This comparer updated with this comparison at the end of the comparision chain</returns>
        public ComparerBuilder<T> CompareByAfter<TCompare>(Func<T, TCompare> keySelector, IComparer<TCompare> comparer = null)
        {
            comparer = comparer ?? Comparer<TCompare>.Default;
            comparers.AddLast(new SelectorComparer<TCompare>(keySelector, comparer));
            return this;
        }

        /// <summary>
        /// Modifies the comparer so that it begins by comparing items using specified comparer on the key generated by the function.
        /// </summary>
        /// <typeparam name="TCompare">the type of key to compare</typeparam>
        /// <param name="keySelector">function for selecting the comparison key</param>
        /// <param name="comparer">the comparer for the key</param>
        /// <returns>This comparer updated with this comparison at the beginning of the comparision chain</returns>
        public ComparerBuilder<T> CompareByBefore<TCompare>(Func<T, TCompare> keySelector, IComparer<TCompare> comparer = null)
        {
            comparer = comparer ?? Comparer<TCompare>.Default;
            comparers.AddFirst(new SelectorComparer<TCompare>(keySelector, comparer));
            return this;
        }

        private class SelectorComparer<TCompare> : Comparer<T>
        {
            Func<T, TCompare> selector;
            IComparer<TCompare> comparer;

            public SelectorComparer(Func<T, TCompare> selector, IComparer<TCompare> comparer)
            {
                this.selector = selector;
                this.comparer = comparer;
            }

            public override int Compare(T x, T y)
            {
                return comparer.Compare(selector(x), selector(y));
            }
        }

        /// <summary>
        /// Compares the items using the list of stored comparers. The result is the first nonzero value returned
        /// by a comparer in the comparison chain. If none of the comparers returns, a non-zero value, the result is
        /// zero.
        /// </summary>
        /// <param name="x">the first object to compare</param>
        /// <param name="y">the second object to compare</param>
        /// <returns>
        /// A signed integer that indicates the relative values of x and y, as shown
        /// in the following table.Value Meaning Less than zero, x is less than y.Zero, x
        /// equals y.Greater than zero, x is greater than y.</returns>
        public override int Compare(T x, T y)
        {
            if (object.ReferenceEquals(x, y))
            {
                return 0;
            }

            if (x == null)
            {
                return y == null ? 0 : -1;
            }
            if (y == null)
            {
                return 1;
            }

            var result = 0;
            foreach (var comparer in comparers)
            {
                result = comparer.Compare(x, y);
                if (result != 0)
                {
                    return result;
                }
            }

            return result;
        }
    }
}
